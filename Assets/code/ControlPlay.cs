//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/code/ControlPlay.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControlPlay : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControlPlay()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlPlay"",
    ""maps"": [
        {
            ""name"": ""Move"",
            ""id"": ""5be7bcbb-8835-4085-93eb-98e07fd103aa"",
            ""actions"": [
                {
                    ""name"": ""TrunLeft"",
                    ""type"": ""Button"",
                    ""id"": ""f3cbe2ff-bad1-43d1-b242-d2e35d449dd3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TurnRight"",
                    ""type"": ""Button"",
                    ""id"": ""ad0d3b5a-4cda-44f5-a3e4-15247b242bfa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""506311a0-3fa6-4c03-be92-ce4e23d8e2c3"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TrunLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8300f067-1177-47e7-8e12-d9a43956e73f"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Move
        m_Move = asset.FindActionMap("Move", throwIfNotFound: true);
        m_Move_TrunLeft = m_Move.FindAction("TrunLeft", throwIfNotFound: true);
        m_Move_TurnRight = m_Move.FindAction("TurnRight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Move
    private readonly InputActionMap m_Move;
    private IMoveActions m_MoveActionsCallbackInterface;
    private readonly InputAction m_Move_TrunLeft;
    private readonly InputAction m_Move_TurnRight;
    public struct MoveActions
    {
        private @ControlPlay m_Wrapper;
        public MoveActions(@ControlPlay wrapper) { m_Wrapper = wrapper; }
        public InputAction @TrunLeft => m_Wrapper.m_Move_TrunLeft;
        public InputAction @TurnRight => m_Wrapper.m_Move_TurnRight;
        public InputActionMap Get() { return m_Wrapper.m_Move; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveActions set) { return set.Get(); }
        public void SetCallbacks(IMoveActions instance)
        {
            if (m_Wrapper.m_MoveActionsCallbackInterface != null)
            {
                @TrunLeft.started -= m_Wrapper.m_MoveActionsCallbackInterface.OnTrunLeft;
                @TrunLeft.performed -= m_Wrapper.m_MoveActionsCallbackInterface.OnTrunLeft;
                @TrunLeft.canceled -= m_Wrapper.m_MoveActionsCallbackInterface.OnTrunLeft;
                @TurnRight.started -= m_Wrapper.m_MoveActionsCallbackInterface.OnTurnRight;
                @TurnRight.performed -= m_Wrapper.m_MoveActionsCallbackInterface.OnTurnRight;
                @TurnRight.canceled -= m_Wrapper.m_MoveActionsCallbackInterface.OnTurnRight;
            }
            m_Wrapper.m_MoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TrunLeft.started += instance.OnTrunLeft;
                @TrunLeft.performed += instance.OnTrunLeft;
                @TrunLeft.canceled += instance.OnTrunLeft;
                @TurnRight.started += instance.OnTurnRight;
                @TurnRight.performed += instance.OnTurnRight;
                @TurnRight.canceled += instance.OnTurnRight;
            }
        }
    }
    public MoveActions @Move => new MoveActions(this);
    public interface IMoveActions
    {
        void OnTrunLeft(InputAction.CallbackContext context);
        void OnTurnRight(InputAction.CallbackContext context);
    }
}
